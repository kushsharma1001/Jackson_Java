1) Jackson java classes must need a default constructor either given by ide or manually creating one by user.
2) pom dependency:

<dependency>
	<groupId>com.fasterxml.jackson.core</groupId>
	<artifactId>jackson-databind</artifactId>
	<version>2.2.3</version>
</dependency>

This dependency will also transitively add the following libraries to the classpath:

jackson-annotations-2.9.8.jar
jackson-core-2.9.8.jar
jackson-databind-2.9.8.jar
Always use the latest versions from the Maven central repository.

3) There is no getter setter in class, then it serializes/deserializes only public fields. Serialization/DeSerialization 
   of non public fields is not allowed.

public class Car {

	int id;
	protected String size;
	private String color;
	public int type;
	//no getters and setters
	
	@Override
	public String toString() {
		return "Car [color=" + color + ", id=" + id + ", size=" + size + ", type=" + type + "]";
	}
}


class Test
{
	ps vm(String args[])
	{
		ObjectMapper mapper = new ObjectMapper();
		 
	    Car car = new Car(); // we can have a parameterized or copy constructor also in Car class. But then implement default yourself.
		//default constructor is mandatory.
	    
	    String dtoAsString = mapper.writeValueAsString(car); //only public fields from Java class are written to json
	    System.out.println(dtoAsString); // {"type":0}
	    
	    String json = "{ \"type\": 9}"; 
	    Car car1 = mapper.readValue(json, Car.class); //if json contains other non public fields, we will get error on mapper.readValue()
	    //if we want json with other fields in json to work fine at the time of mapping with our class, then,
      //use @IgnoreProperties(unknown=true) at class level
		System.out.println(car1); //Car [color=null, id=0, size=null, type=9]
	}
}

4) Class with non public fields just need getters for serializes/deserializes :

public class Car {

	int id;
	protected String size;
	private String color;
	public int type;
	
	@Override
	public String toString() {
		return "Car [color=" + color + ", id=" + id + ", size=" + size + ", type=" + type + "]";
	}
	
	public String getColor() {
		return color;
	}

	public int getId() {
		return id;
	}

	public String getSize() {
		return size;
	}

	public int getType() {
		return type;
	}
}


class Test
{
	ps vm(String args[])
	{
		ObjectMapper mapper = new ObjectMapper();
		 
	    Car car = new Car(); // we can have a parameterized or copy constructor also in Car class. 
      //But then we have to define default //constructor ourselves as its mandatory.
	    
	    String dtoAsString = mapper.writeValueAsString(car); //all fields from Java class are written to json
	    System.out.println(dtoAsString); // {"color":"","id":0,"size":"","type":0}
	    
	    String json = "{ \"color\": \"yellows\", \"type\": 9}"; //json can have all of the class fields.
	    Car car1 = mapper.readValue(json, Car.class); //if json contains other fields not present in class, 
      //we will get error on mapper.readValue()
	    //if we want json with other fields to work fine at the time of mapping with our class, then,
      //use @IgnoreProperties(unknown=true) at class level
		System.out.println(car1); //Car [color=yellows, id=0, size=null, type=9]
	}
}

5) Best way to get rid of these things is using PropertyAccessor.FIELD, Visibility.ANY. This allows all field of all types to be 
   mapped in json parsing.

public class Car {

	public String color;
	 int id;
	private String size;
	protected int type;
	//no getter setter
	
	@Override
	public String toString() {
		return "Car [color=" + color + ", id=" + id + ", size=" + size + ", type=" + type + "]";
	}

	public Car()
	{
			
	}
	public Car(String color, int id, String size, int type) {
		super();
		this.color = color;
		this.id = id;
		this.size = size;
		this.type = type;
	}
	
}

class Test
{
	ps vm(String args[])
	{
		ObjectMapper mapper = new ObjectMapper();
		mapper.setVisibility(PropertyAccessor.FIELD, Visibility.ANY); //tells jackson to take all kinda fileds with any 
    //visibility for json mapping
		
	    Car car = new Car("orange", 9, "lamborgini", 10);
	    String dtoAsString = mapper.writeValueAsString(car);
	    System.out.println(dtoAsString); // {"color":"orange","id":9,"size":"lamborgini","type":10}
	    
	    String json = "{ \"color\": \"yellows\", \"type\": 9}";
	    Car car1 = mapper.readValue(json, Car.class);
	    System.out.println(car1); //Car [color=yellows, id=0, size=null, type=9]
	}
}

6) To ignore Serialization and DeSerialization of confidential fields like "password". Use @JsonIgnore at instance var level.

public class Car {

	@JsonIgnore
	public String color;
	 int id;
	private String size;
	protected int type;
	
	@Override
	public String toString() {
		return "Car [color=" + color + ", id=" + id + ", size=" + size + ", type=" + type + "]";
	}

	public Car()
	{
			
	}
	public Car(String color, int id, String size, int type) {
		super();
		this.color = color;
		this.id = id;
		this.size = size;
		this.type = type;
	}

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getSize() {
		return size;
	}

	public void setSize(String size) {
		this.size = size;
	}

	public int getType() {
		return type;
	}

	public void setType(int type) {
		this.type = type;
	}	
	
}

class Test
{
	ps vm(String args[])
	{
		ObjectMapper mapper = new ObjectMapper();		
		
	    Car car = new Car("grey", 9, "lamborgini", 10);
	    String dtoAsString = mapper.writeValueAsString(car);
	    System.out.println(dtoAsString); //{"id":9,"size":"lamborgini","type":10} 
		//color "grey" is not printed as part of json string bcoz of @JsonIgnore annotation
	    
	    String json = "{ \"color\": \"blue\", \"type\": 1}";
	    Car car1 = mapper.readValue(json, Car.class);
	    System.out.println(car1);//Car [color=null, id=0, size=null, type=1]
		//color "blue" is not mapped to Car from json bcoz of @JsonIgnore annotation
	}
}

7) We have already seen How to ignore a field completely on serialization and deserialization.
   But, sometimes we only need to ignore the field on either, but not on both. Jackson is flexible enough 
   to accommodate this interesting usecase as well.

The following example shows a User object which contains sensitive password information which shouldn't be serialized to JSON.

To get there, we simply add the @JsonIgnore annotation on the instance var + getter of the password, and enable deserialization 
for the field by applying the @JsonProperty annotation on the setter:

public class Car {

	@JsonIgnore
	public String color;
	 int id;
	private String size;
	protected int type;
	
	@Override
	public String toString() {
		return "Car [color=" + color + ", id=" + id + ", size=" + size + ", type=" + type + "]";
	}

	public Car()
	{
			
	}
	public Car(String color, int id, String size, int type) {
		super();
		this.color = color;
		this.id = id;
		this.size = size;
		this.type = type;
	}

	@JsonIgnore
	public String getColor() {
		return color;
	}

	@JsonProperty
	public void setColor(String color) {
		this.color = color;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getSize() {
		return size;
	}

	public void setSize(String size) {
		this.size = size;
	}

	public int getType() {
		return type;
	}

	public void setType(int type) {
		this.type = type;
	}	
	
}

class Test
{
	ps vm(String args[])
	{
		ObjectMapper mapper = new ObjectMapper();		
		
	    Car car = new Car("grey", 9, "lamborgini", 10);
	    String dtoAsString = mapper.writeValueAsString(car);
	    System.out.println(dtoAsString); //{"id":9,"size":"lamborgini","type":10} 
		//color "grey" is not printed as part of json string bcoz of @JsonIgnore annotation at instance var + getter
	    
	    String json = "{ \"color\": \"blue\", \"type\": 1}";
	    Car car1 = mapper.readValue(json, Car.class);
	    System.out.println(car1);//Car [color=blue, id=0, size=null, type=1]
		//color "blue" is mapped to Car from json bcoz of @JsonProperty annotation at setter
	}
}

Note: Aliterly, We can just use a single annotation @JsonProperty(access = Access.WRITE_ONLY/READ_ONLY) at instance var level 
instead of using 3 annotation at 3 places (i.e. instance var, getter and setter level). This is in new versions of jackson

* @JsonProperty(access = Access.WRITE_ONLY) = allows mapping of the field from json to Class only. Class object cannot be written 
  to json 
* @JsonProperty(access = Access.READ_ONLY) = allows mapping of the field from class to json only. json object cannot be mapped to
  class
  
8) Instead of just mapping a single object from json to java. We can map a json array to java array, list, map etc also 

public class Car {

	public String color;
	 int id;
	private String size;
	protected int type;
	
	@Override
	public String toString() {
		return "Car [color=" + color + ", id=" + id + ", size=" + size + ", type=" + type + "]";
	}

	public Car()
	{
			
	}
	public Car(String color, int id, String size, int type) {
		super();
		this.color = color;
		this.id = id;
		this.size = size;
		this.type = type;
	}

	public String getColor() {
		return color;
	}

	public void setColor(String color) {
		this.color = color;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getSize() {
		return size;
	}

	public void setSize(String size) {
		this.size = size;
	}

	public int getType() {
		return type;
	}

	public void setType(int type) {
		this.type = type;
	}	
	
}

class Test
{
	ps vm(String args[])
	{
		ObjectMapper mapper = new ObjectMapper();		
		String jsonCarArray = 
	    		  "[{ \"color\" : \"Black\", \"type\" : 0 }, { \"color\" : \"Red\", \"type\" : 1 }]";
	    List<Car> listCar = mapper.readValue(jsonCarArray, new TypeReference<List<Car>>(){});
	    listCar.forEach(tem-> System.out.println(tem)); // Car [color=Black, id=0, size=null, type=0]
													    // Car [color=Red, id=0, size=null, type=1]
														
														or
														
		mapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true);
		Car[] cars = mapper.readValue(jsonCarArray, Car[].class);
	}
}

* Note that we can also get a Map like this:
String json = "{ \"color\" : \"Black\", \"type\" : \"BMW\" }";
Map<String, Object> map = objectMapper.readValue(json, new TypeReference<Map<String,Object>>(){});
